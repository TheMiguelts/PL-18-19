package pascalac;
import java.util.ArrayList;
import java_cup.runtime.*;

parser code {:

public void syntax_error (Symbol s){
	System.err.println("Error de sintaxis (lexema <" + s.value.toString() + ">) en la linea " + s.left + " y en la columna " + s.right);
	System.err.println("Error recuperado");
}

public void unrecovered_syntax_error(Symbol s){
	System.err.println("Error de sintaxis no recuperable");
}
:};


terminal  String _if, _else, _while, _do, _until, _for, 
negacion, and, or, igualdad, menorIgual, mayorIgual, mayor, menor, 
_define, suma, resta, Tvoid, Tint, Tfloat, _return, 
constint, constlit, constfloat, 
llaveAbierta, llaveCerrada, parentesisAbierto, parentesisCerrado, 
coma, multiplicacion, division, modulo, asignacion, puntoYComa, ident;

non terminal Programa PROGRAM, DEFINES, PARTES, PART;
non terminal Funcion LISTPARAM, LID, BLQ, RESTPART, SENTLIST;
non terminal Sentencia SENT, COND, LCOND;
non terminal Expresion FACTOR, EXP, LEXP;
non terminal Simbolo CTES, TYPE, OP, OPL, OPR;

precedence left or;
precedence left and;
precedence left menor, mayor, menorIgual, mayorIgual, igualdad;
precedence left suma, resta;
precedence left multiplicacion, division, modulo;

PROGRAM ::= DEFINES:p1 PARTES:p2 {:
			Programa p = new Programa();
			p.declaraciones = p1.declaraciones;
			p.funciones = p2.funciones;
			Programa.generarFichero(p.imprimir().toString());
			RESULT = p;
			
:}
| PARTES:p {:
			Programa.generarFichero(p.imprimir().toString());
			RESULT = p;
				
:}
;


DEFINES ::= _define ident:id CTES:cte DEFINES:listaDef {:
			Programa p = new Programa();
			Sentencia sentencia = new Sentencia();
			sentencia.esDeclaracionCte = true;

			Simbolo d = new Simbolo();
			d.define = "define";
			d.esDefine = true;

			Simbolo s_id = new Simbolo();
			s_id.identificador = id;
			s_id.esIdentificador = true;
			
			Simbolo s_cte = cte;

			sentencia.simbolos.add(d);
			sentencia.simbolos.add(s_id);
			sentencia.simbolos.add(s_cte);


			p.declaraciones.add(sentencia);
			p.declaraciones.addAll(listaDef.declaraciones);
			
			RESULT = p;
			
:}
| _define ident:id CTES:cte {:
			Programa p = new Programa();
			Sentencia sentencia = new Sentencia();
			sentencia.esDeclaracionCte = true;

			Simbolo d = new Simbolo();
			d.define = "def";
			d.esDefine = true;

			Simbolo s_id = new Simbolo();
			s_id.identificador = id;
			s_id.esIdentificador = true;
			
			Simbolo s_cte = cte;

			sentencia.simbolos.add(d);
			sentencia.simbolos.add(s_id);
			sentencia.simbolos.add(s_cte);


			p.declaraciones.add(sentencia);

			RESULT = p;	
			
			
:}
;


CTES ::= constint:cte {:
			Simbolo s = new Simbolo();
			s.valorCte = cte;
			s.esCte = true;
			RESULT = s;
			
:}
| constfloat:cte {:
			Simbolo s = new Simbolo();
			s.valorCte = cte;
			s.esCte = true;
			RESULT = s;
			
:}			
| constlit:cte {:
			Simbolo s = new Simbolo();
			s.valorCte = cte;
			s.esCte = true;
			RESULT = s;
			
:};


PARTES ::= PART:f PARTES:p {:
			p.funciones.addAll(0, f.funciones);
			RESULT = p;
			
:}
| PART:p {:
			
			RESULT = p;
			
:}
;


PART ::= TYPE:t RESTPART:f {:
			Programa p = new Programa();
			f.tipo = t.tipo;
			p.funciones.add(f);
			RESULT = p;
			
:}
;


RESTPART ::= ident:id parentesisAbierto LISTPARAM:funcionParametros parentesisCerrado BLQ:funcionBloque{:
			Funcion f = new Funcion();
			f.nombre = id;
			f.parametros = funcionParametros.parametros;
			f.declaraciones = funcionBloque.declaraciones;
			f.bloque = funcionBloque.bloque;
			RESULT = f;
			
:}
| ident:id parentesisAbierto Tvoid parentesisCerrado BLQ:funcionBlq {:
			Funcion f = new Funcion();
			f.nombre = id;
			f.parametros = null;
			f.declaraciones = funcionBlq.declaraciones;
			f.bloque = funcionBlq.bloque;
			RESULT = f;
			
:} 
|error llaveCerrada {:
			Funcion f = new Funcion();
			f.error = true;
			RESULT = f;
:}
			
;


BLQ ::= llaveAbierta SENTLIST:funcionSent llaveCerrada {:

			RESULT = funcionSent;						
			
:} 
;


LISTPARAM ::= LISTPARAM:funcionListaParametros coma TYPE:Ttipo ident:id {:
			Simbolo parametroIdent = new Simbolo();
			parametroIdent.identificador = id;
			parametroIdent.esIdentificador = true;

			Simbolo coma = new Simbolo();
			coma.coma = ",";
			coma.esComa = true;

			funcionListaParametros.parametros.simbolos.add(coma);
			funcionListaParametros.parametros.simbolos.add(Ttipo);
			funcionListaParametros.parametros.simbolos.add(parametroIdent);

			funcionListaParametros.parametros.esParametroFuncion = true;

			RESULT = funcionListaParametros;
			
:}						
| TYPE:Ttipo ident:id {:
			Funcion f = new Funcion();
			
			Simbolo parametroIdent = new Simbolo();
			parametroIdent.identificador = id;
			parametroIdent.esIdentificador = true;

			Sentencia sentencia = new Sentencia();
			sentencia.simbolos.add(Ttipo);
			sentencia.simbolos.add(parametroIdent);

			sentencia.esParametroFuncion = true;

			f.parametros = sentencia;
			RESULT = f;
			
:}

;


TYPE ::= Tvoid {:
			Simbolo s = new Simbolo();
			s.tipo = "";
			s.esTipo = true;
			RESULT = s;
			
:}
| Tint {:
			Simbolo s = new Simbolo();
			s.tipo = "int";
			s.esTipo = true;
			RESULT = s;
			
:}
| Tfloat {: 
			Simbolo s = new Simbolo();
			s.tipo = "float";
			s.esTipo = true;
			RESULT = s;
			
:}

;


SENTLIST ::= SENTLIST:listaSent SENT:sentencia {:
			Programa.contadorSentencias++;	
			sentencia.numeroSentencia = Programa.contadorSentencias;
			if (sentencia.esDeclaracionFuncion){
				
				listaSent.declaraciones.add(sentencia);
			}else if (sentencia.esControlFlujo){
				if (!sentencia.declaraciones.isEmpty()){
					listaSent.declaraciones.addAll(sentencia.declaraciones);
				}
				listaSent.bloque.add(sentencia);

			}else{
				
				listaSent.bloque.add(sentencia);
			}
			
			RESULT = listaSent;
			
:} 
| SENT:sentencia {:
			Funcion f = new Funcion();
			Programa.contadorSentencias++;
			sentencia.numeroSentencia = Programa.contadorSentencias;
			if (sentencia.esDeclaracionFuncion){
				
				f.declaraciones.add(sentencia);
			}else if (sentencia.esControlFlujo){
				if (!sentencia.declaraciones.isEmpty()){
					f.declaraciones.addAll(sentencia.declaraciones);
				}
				f.bloque.add(sentencia);
			}else{
				
				f.bloque.add(sentencia);
			}
			RESULT = f;
			
:}
;


SENT ::= TYPE:t LID:f puntoYComa {:
			Programa.contadorSentencias++;	
			
			
			Simbolo s = new Simbolo();
			s.puntoYComa = ";";
			s.esPuntoYComa = true;

			Sentencia sent = new Sentencia();
			sent.esDeclaracionFuncion = true;
			sent.simbolos.add(t);
			for (Sentencia aux : f.declaraciones)
				for (Simbolo aux2 : aux.simbolos)
					sent.simbolos.add(aux2);
			sent.simbolos.add(s);
			sent.contadorTabulaciones = 1;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| ident:id asignacion EXP:exp2 puntoYComa {:
			Programa.contadorSentencias++;	
			

			Simbolo s = new Simbolo();
			s.identificador = id;
			s.esIdentificador = true;

			Simbolo s2 = new Simbolo();
			s2.asignacion = "=";
			s2.esAsignacion = true;

			Simbolo s4 = new Simbolo();
			s4.puntoYComa = ";";
			s4.esPuntoYComa = true;

			Sentencia sent = new Sentencia();
			sent.simbolos.add(s);
			sent.simbolos.add(s2);
			sent.simbolos.addAll(exp2.simbolos);
			sent.simbolos.add(s4);
			sent.esAsignacion = true;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| ident:id parentesisAbierto LEXP:exp2 parentesisCerrado puntoYComa {:
			Programa.contadorSentencias++;	
		

			Simbolo s = new Simbolo();
			s.identificador = id;
			s.esIdentificador = true;

			Simbolo s2 = new Simbolo();
			s2.parentesis = "(";
			s2.esParentesis = true;

			Simbolo s3 = new Simbolo();
			s3.parentesis = ")";
			s3.esParentesis = true;

			Simbolo s4 = new Simbolo();
			s4.puntoYComa = ";";
			s4.esPuntoYComa = true;

			Sentencia sent = new Sentencia();
			sent.simbolos.add(s);
			sent.simbolos.add(s2);
			sent.simbolos.addAll(exp2.simbolos);
			sent.simbolos.add(s3);
			sent.simbolos.add(s4);
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| ident:id parentesisAbierto parentesisCerrado puntoYComa {:
			Programa.contadorSentencias++;	
		

			Simbolo s = new Simbolo();
			s.identificador = id;
			s.esIdentificador = true;

			Simbolo s2 = new Simbolo();
			s2.parentesis = "(";
			s2.esParentesis = true;

			Simbolo s3 = new Simbolo();
			s3.parentesis = ")";
			s3.esParentesis = true;

			Simbolo s4 = new Simbolo();
			s4.puntoYComa = ";";
			s4.esPuntoYComa = true;

			Sentencia sent = new Sentencia();
			sent.simbolos.add(s);
			sent.simbolos.add(s2);
			sent.simbolos.add(s3);
			sent.simbolos.add(s4);
			sent.numeroSentencia = Programa.contadorSentencias;
			sent.llamadaProcSinParent = true;
			RESULT = sent;
			
:}
| _return EXP:exp puntoYComa {:
			Programa.contadorSentencias++;	
			

			Simbolo s = new Simbolo();
			s.ret = "return";
			s.esReturn = true;

			Simbolo s2 = new Simbolo();
			s2.puntoYComa = ";";
			s2.esPuntoYComa = true;

			Sentencia sent = new Sentencia();
			sent.simbolos.add(s);
			sent.simbolos.addAll(exp.simbolos);
			sent.simbolos.add(s2);
			sent.esReturn = true;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| _if parentesisAbierto LCOND:cond parentesisCerrado BLQ:bloque _else BLQ:bloque2 {:
			Programa.contadorSentencias++;
	


			Sentencia sent = new Sentencia();
			sent.nombre = "if";
			
			for (Sentencia s : bloque.declaraciones){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}
			}

			for (Sentencia s : bloque.bloque){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}else {
					sent.bloque.add(s);
				}
			}

			for (Sentencia s : bloque2.bloque){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}else {
					sent.bloqueElse.add(s);
				}
			}
			sent.condicion.addAll(cond.condicion);
			sent.esControlFlujo = true;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| _while parentesisAbierto LCOND:cond parentesisCerrado BLQ:bloque {:
			Programa.contadorSentencias++;	


			Sentencia sent = new Sentencia();
			sent.nombre = "while";

			for (Sentencia s : bloque.declaraciones){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}
			}
			
			for (Sentencia s : bloque.bloque){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}else {
					sent.bloque.add(s);
				}
			}
			sent.condicion.addAll(cond.condicion);
			sent.esControlFlujo = true;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| _do BLQ:bloque _until parentesisAbierto LCOND:cond parentesisCerrado {:
			Programa.contadorSentencias++;	


			Sentencia sent = new Sentencia();
			sent.nombre = "do";

			for (Sentencia s : bloque.declaraciones){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}
			}
			
			for (Sentencia s : bloque.bloque){
				if (s.esDeclaracionFuncion){
					sent.declaraciones.add(s);
				}else {
					sent.bloque.add(s);
				}
			}
			sent.condicion.addAll(cond.condicion);
			sent.esControlFlujo = true;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;
			
:}
| _for parentesisAbierto ident:id1 asignacion EXP:exp1 puntoYComa LCOND:cond puntoYComa ident:id2 asignacion EXP:exp2 parentesisCerrado BLQ:bloque {:
			Programa.contadorSentencias++;	


			Simbolo s = new Simbolo();
			s.identificador = id1;
			s.esIdentificador = true;

			Simbolo s2 = new Simbolo();
			s2.asignacion = "=";
			s2.esAsignacion = true;

			Simbolo s3 = new Simbolo();
			s3.puntoYComa = ";";
			s3.esPuntoYComa = true;

			Simbolo s4 = new Simbolo();
			s4.puntoYComa = ";";
			s4.esPuntoYComa = true;

			Simbolo s5 = new Simbolo();
			s5.identificador = id2;
			s5.esIdentificador = true;

			Simbolo s6 = new Simbolo();
			s6.asignacion = "=";
			s6.esAsignacion = true;

			Sentencia sent = new Sentencia();
			sent.nombre = "for";

			for (Sentencia ss : bloque.declaraciones){
				if (ss.esDeclaracionFuncion){
					sent.declaraciones.add(ss);
				}
			}

			
			sent.condicion1For.add(s);
			sent.condicion1For.add(s2);
			sent.condicion1For.addAll(exp1.simbolos);

			sent.condicion2For.addAll(cond.condicion);

			sent.condicion3For.add(s5);
			sent.condicion3For.add(s6);
			sent.condicion3For.addAll(exp2.simbolos);
			for (Sentencia sAux : bloque.bloque){
				if (sAux.esDeclaracionFuncion){
					sent.declaraciones.add(sAux);
				}else {
					sent.bloque.add(sAux);
				}
			}
			sent.esControlFlujo = true;

			sent.esCondicion1For = true;
			sent.esCondicion2For = true;
			sent.esCondicion3For = true;

			sent.identificadorFor = s;
			sent.exp1For = exp1;
			sent.exp2For = exp2;
			sent.numeroSentencia = Programa.contadorSentencias;
			RESULT = sent;	
			
:} | error puntoYComa {:
			Sentencia s = new Sentencia();
			s.error = true;
			RESULT = s;
:}

;


LID ::= ident:id {:
			Funcion f = new Funcion();
			Sentencia s = new Sentencia();

			Simbolo i = new Simbolo();
			i.identificador = id;
			i.esIdentificador = true;

			s.simbolos.add(i);
			f.declaraciones.add(s);
			RESULT = f;
			
:}
| LID:dec coma ident:id {:
			Funcion f = new Funcion();
			Sentencia s = new Sentencia();

			Simbolo i = new Simbolo();
			i.identificador = id;
			i.esIdentificador = true;

			Simbolo coma = new Simbolo();
			coma.coma = ",";
			coma.esComa = true;

			for (Sentencia aux : dec.declaraciones)
				for (Simbolo aux2 : aux.simbolos)
					s.simbolos.add(aux2);
			s.simbolos.add(coma);
			s.simbolos.add(i);
			
			f.declaraciones.add(s);
			RESULT = f;
			
:}

;


LEXP ::= EXP:exp {:
			RESULT = exp;
			
:}
| LEXP:exp1 coma EXP:exp2 {:
			Expresion e = new Expresion();

			Simbolo s = new Simbolo();
			s.esComa = true;
			s.coma = ",";

			e.simbolos.addAll(exp1.simbolos);
			e.simbolos.add(s);
			e.simbolos.addAll(exp2.simbolos);
			RESULT = e;
			
:}
	
;


EXP ::= EXP:exp1 OP:op EXP:exp2 {:
			Expresion e = new Expresion();

			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = op.operacion;

			e.simbolos.addAll(exp1.simbolos);
			e.simbolos.add(s);
			e.simbolos.addAll(exp2.simbolos);
			RESULT = e;
			
:}			 
| FACTOR:exp {:
			RESULT = exp;
			
:}

;


OP ::= suma {:
			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = "+";
			RESULT = s;
			
:}
| resta {:
			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = "-";
			RESULT = s;
			
:}
| multiplicacion {:
			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = "*";
			RESULT = s;
			
:}
| division {:
			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = "/";
			RESULT = s;
:}
			
| modulo {:
			Simbolo s = new Simbolo();
			s.esOperacion = true;
			s.operacion = "%";
			RESULT = s;
			
:}
;


FACTOR ::= ident:id parentesisAbierto LEXP:exp parentesisCerrado {:
			Expresion e = new Expresion();

			Simbolo s = new Simbolo();
			s.esIdentificador = true;
			s.identificador = id;

			Simbolo s1 = new Simbolo();
			s1.esParentesis = true;
			s1.parentesis = "(";

			Simbolo s2 = new Simbolo();
			s2.esParentesis = true;
			s2.parentesis = ")";
			
			e.simbolos.add(s);
			e.simbolos.add(s1);
			e.simbolos.addAll(exp.simbolos);
			e.simbolos.add(s2);
			RESULT = e;
			
:} 
| ident:id parentesisAbierto parentesisCerrado {:
			Expresion e = new Expresion();

			Simbolo s = new Simbolo();
			s.esIdentificador = true;
			s.identificador = id;

			Simbolo s1 = new Simbolo();
			s1.esParentesis = true;
			s1.parentesis = "(";

			Simbolo s2 = new Simbolo();
			s2.esParentesis = true;
			s2.parentesis = ")";
			
			e.simbolos.add(s);
			e.simbolos.add(s1);
			e.simbolos.add(s2);
			RESULT = e;
			
:}			
| parentesisAbierto EXP:exp parentesisCerrado {:
			Expresion e = new Expresion();

			Simbolo s1 = new Simbolo();
			s1.esParentesis = true;
			s1.parentesis = "(";

			Simbolo s2 = new Simbolo();
			s2.esParentesis = true;
			s2.parentesis = ")";
			
			e.simbolos.add(s1);
			e.simbolos.addAll(exp.simbolos);
			e.simbolos.add(s2);
			RESULT = e;
			
:}
| ident:id {:
			Expresion e = new Expresion();
			Simbolo s = new Simbolo();
			s.esIdentificador = true;
			s.identificador = id;
			e.simbolos.add(s);
			RESULT = e;
			
:}
| CTES:cte {:
			Expresion e = new Expresion();
			e.simbolos.add(cte);
			RESULT = e;
			
:}

;


LCOND ::= LCOND:cf1 OPL:opl LCOND:cf2 {:
			cf1.condicion.add(opl);
			cf1.condicion.addAll(cf2.condicion);
			RESULT = cf1;
			
:}
| COND:cf {:
			RESULT = cf;
			
:}
| negacion COND:cf {:
			Simbolo s = new Simbolo();
			s.negacion = " not ";
			s.esNegacion = true;

			cf.condicion.add(0, s);
			RESULT = cf;
			
:}

;


OPL ::= or {:
			Simbolo s = new Simbolo();
			s.esOperacionL = true;
			s.operacionL = " or ";
			RESULT = s;
			
:}
| and {:
			Simbolo s = new Simbolo();
			s.esOperacionL = true;
			s.operacionL = " and ";
			RESULT = s;
			
:}

;


COND ::= EXP:exp1 OPR:opr EXP:exp2 {:

			Simbolo s = new Simbolo();
			s = opr;

			Sentencia cf = new Sentencia();
			cf.condicion.addAll(exp1.simbolos);
			cf.condicion.add(opr);
			cf.condicion.addAll(exp2.simbolos);

			RESULT = cf;
			
:}

;


OPR::= igualdad {:
			Simbolo s = new Simbolo();
			s.esOperacionC = true;
			s.operacionC = " = ";
			RESULT = s;
			
:}
| menor {:
			Simbolo s = new Simbolo();
			s.esOperacionC = true;
			s.operacionC = " < ";
			RESULT = s;
			
:}
| mayor {:
			Simbolo s = new Simbolo();
			s.esOperacionC = true;
			s.operacionC = " > ";
			RESULT = s;
			
:}
| mayorIgual {:
			Simbolo s = new Simbolo();
			s.esOperacionC = true;
			s.operacionC = " >= ";
			RESULT = s;
			
:}
| menorIgual {:
			Simbolo s = new Simbolo();
			s.esOperacionC = true;
			s.operacionC = " <= ";
			RESULT = s;
			
:}

;




