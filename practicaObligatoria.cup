import java_cup.runtime.*;
import java.io.*;
import java.util.*;
parser code{:

	public void syntax_error(Symbol s){
		report_error("Error encontrado en linea: "+s.left+ "columna: "+s.right,null);
	}
	public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
		report_fatal_error("Error encontrado en linea: "+s.left+"columna: "+s.right,null);
	}
:};
terminal String identificador, abrirP, cerrarP, abrirLl, cerrarLl, coma, vacio, entero, real,
puntoComa, opAsignacion, opMas, opMenos, opMultiplicacion, opDivision, opModulo, constEntera, cero, constReal,
constLit, estIf, estThen, estElse, estFor, estWhile, estDo, estUntil, estRepetir, opOr, opAnd, opNot, opIgual, opMenor,
opMayor, opMenorIgual, opMayorIgual, punto, cerrarC, abrirC, define, devolver, constRealExp, constRealMixto, to,
programa, variables, dosPuntos, constante, unit;

non terminal Simbolo S,TYPE,OP,OPL,OPR,DEFINES,SENT,PROGRAM,LISTPARAM,BLQ,EXP,
FACTOR,LEXP,LCOND,LCONDp,COND,LID,CTES,SENTLIST,RESTPART,PART,PARTES;


precedence right opMultiplicacion, opMas;
precedence right opMultiplicacion, opMenos;
precedence right opMultiplicacion, opModulo;
precedence right opDivision, opMas;
precedence right opDivision, opMenos;
precedence right opDivision, opModulo;

precedence right opAnd, opOr;

PRG::=programa identifier:identificador puntoComa BLQ:blq punto
    | unit identifier:identificador puntoComa DCLLIST punto;

BLQ ::= DCLLIST begin SENTLIST end;

DCLLIST ::= ʎ
    | DCLLIST DCL;

SENTLIST ::= SENT
    | SENTLIST SENT;

DCL ::= DEFCTE
    | DEFVAR
    | DEFPROC
    | DEFFUN;

DEFCTE ::= constante CTELIST;

CTELIST ::= identifier:identificador opIgual SIMPVALUE puntoComa
    | CTELIST identifier:identificador opIgual SIMPVALUE puntoComa;

SIMPVALUE ::= numeric_integer_const: constEntera
    | numeric_real_const: constReal
    | string_const: constLit;

DEFVAR ::= variables DEFVARLIST puntoComa;

DEFVARLIST ::= VARLIST dosPuntos TBAS
    | DEFVARLIST puntoComa VARLIST dosPuntos TBAS;

VARLIST ::= identifier:identificador
    | identifier coma VARLIST;

DEFPROC ::= procedimiento identifier:identificador FORMAL_PARAMLIST puntoComa BLQ puntoComa;

DEFFUN ::= funcion identifier:identificador FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa;

FORMAL_PARAMLIST ::= ʎ
    | abrirP FORMAL_PARAM cerrarP;

FORMAL_PARAM ::= VARLIST dosPuntos TBAS
    | VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM;

TBAS ::= entero
    | real;

SENT ::= ASIG puntoComa
    | PROC_CALL puntoComa
    | estIf EXPCOND estThen BLQ estElse BLQ
    | estWhile EXPCOND estDo BLQ
    | estRepetir BLQ estUntil EXPCOND puntoComa
    | estFor identifier:identificador opAsignacion EXP INC EXP do BLQ;

ASIG ::= ID opAsignacion EXP;

ID := identifier:identificador;

EXP ::= EXP OP EXP
    | FACTOR;

OP ::= OPARIT;

OPARIT ::= opMas
    | opMenos
    | opMultiplicacion
    | opDivision
    | opModulo;

FACTOR ::= SIMPVALUE
    | abrirP EXP cerrarP
    | identifier:identificador SUBPPARAMLIST;

SUBPPARAMLIST ::= lambda
    | abrirP EXPLIST cerrarP;

EXPLIST ::= EXP
    | EXP coma EXPLIST;

PROC_CALL ::= identifier:identificador SUBPPARAMLIST;

EXPCOND ::= EXPCOND OPLOG EXPCOND
    | FACTORCOND;

OPLOG ::= opOr
    | opAnd;

FACTORCOND ::= EXP OPCOMP EXP
    | abrirP EXP cerrarP
    | opNot FACTORCOND;

OPCOMP ::= opMenor
    | opMayor
    | opMenorIgual
    | opMayorIgual
    | opIgual;

INC ::= to
    | downto;
