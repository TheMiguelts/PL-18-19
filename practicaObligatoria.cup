import java_cup.runtime.*;
import java.io.*;
import java.util.*;
parser code{:

	public void syntax_error(Symbol s){
		report_error("Error encontrado en linea: "+s.left+ "columna: "+s.right,null);
	}
	public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
		report_fatal_error("Error encontrado en linea: "+s.left+"columna: "+s.right,null);
	}
:};
terminal String identificador, abrirP, cerrarP, abrirLl, cerrarLl, coma, vacio, entero, real,
puntoComa, opAsignacion, opMas, opMenos, opMultiplicacion, opDivision, opModulo, constEntera, cero, constReal,
constLit, estIf, estThen, estElse, estFor, estWhile, estDo, estUntil, estRepetir, opOr, opAnd, opNot, opIgual, opMenor,
opMayor, opMenorIgual, opMayorIgual, punto, cerrarC, abrirC, define, devolver, constRealExp, constRealMixto, to,
programa, variables, dosPuntos, constante, unit, lambda, begin, end, procedimiento, funcion, doPR, downto, enteroDecimal, realMixto, realExponencial, realDecimal,
constanteLiteral, escribir;

non terminal Simbolo S, PRG, BLQ, DCLLIST, SENTLIST, DCL,
DEFCTE, CTELIST, SIMPVALUE, DEFVAR, DEFVARLIST, VARLIST,
DEFPROC, DEFFUN, FORMAL_PARAMLIST, FORMAL_PARAM, TBAS,
SENT, ASIG, ID, EXP, OP, OPARIT, FACTOR, SUBPPARAMLIST,
EXPLIST, PROC_CALL, EXPCOND, OPLOG, FACTORCOND, OPCOMP,INC;


precedence right opMultiplicacion, opMas;
precedence right opMultiplicacion, opMenos;
precedence right opMultiplicacion, opModulo;
precedence right opDivision, opMas;
precedence right opDivision, opMenos;
precedence right opDivision, opModulo;

precedence right opAnd, opOr;
S::=PRG:prg;

PRG::=programa identificador puntoComa BLQ:blq punto
    | unit identificador puntoComa DCLLIST:dcllist punto;

BLQ ::= DCLLIST:dcllist begin SENTLIST:sentlist end;

DCLLIST ::= lambda
    | DCLLIST:dcllist DCL:dcl;

SENTLIST ::= SENT:sent
    | SENTLIST:sentlist SENT:sent;

DCL ::= DEFCTE:defcte
    | DEFVAR:defvar
    | DEFPROC:defproc
    | DEFFUN:deffun;

DEFCTE ::= constante CTELIST:ctelist;

CTELIST ::= identificador opIgual SIMPVALUE:simpvalue puntoComa
    | CTELIST:ctelist identificador opIgual SIMPVALUE:simpvalue puntoComa;

SIMPVALUE ::= constEntera
    | constReal
    | constLit;

DEFVAR ::= variables DEFVARLIST:defvarlist puntoComa;

DEFVARLIST ::= VARLIST:varlist dosPuntos TBAS:tbas
    | DEFVARLIST:defvarlist puntoComa VARLIST:varlist dosPuntos TBAS:tbas;

VARLIST ::= identificador
    | identificador coma VARLIST:varlist;

DEFPROC ::= procedimiento identificador FORMAL_PARAMLIST:formalParamList puntoComa BLQ:blq puntoComa;

DEFFUN ::= funcion identificador FORMAL_PARAMLIST:formalParamList dosPuntos TBAS:tbas puntoComa BLQ:blq puntoComa;

FORMAL_PARAMLIST ::= lambda
    | abrirP FORMAL_PARAM:formalParam cerrarP;

FORMAL_PARAM ::= VARLIST:varlist dosPuntos TBAS:tbas
    | VARLIST:varlist dosPuntos TBAS:tbas puntoComa FORMAL_PARAM:formalParam;

TBAS ::= entero
    | real;

SENT ::= ASIG:asig puntoComa
    | PROC_CALL:proCall puntoComa
    | estIf EXPCOND:expcond estThen BLQ:blq estElse BLQ:blq2
    | estWhile EXPCOND:expcond estDo BLQ:blq
    | estRepetir BLQ:blq estUntil EXPCOND:expcond puntoComa
    | estFor identificador opAsignacion EXP:exp INC:inc EXP:exp2 doPR BLQ:blq;

ASIG ::= ID:id opAsignacion EXP:exp;

ID ::= identificador;

EXP ::= EXP:exp OP:op EXP:exp2
    | FACTOR:factor;

OP ::= OPARIT:oparit;

OPARIT ::= opMas
    | opMenos
    | opMultiplicacion
    | opDivision
    | opModulo;

FACTOR ::= SIMPVALUE:simpvalue
    | abrirP EXP:exp cerrarP
    | identificador SUBPPARAMLIST:subparamlist;

SUBPPARAMLIST ::= lambda
    | abrirP EXPLIST:explist cerrarP;

EXPLIST ::= EXP:exp
    | EXP:exp coma EXPLIST:explist;

PROC_CALL ::= identificador SUBPPARAMLIST:subparamlist;

EXPCOND ::= EXPCOND:expcond OPLOG:oplog EXPCOND:expcond2
    | FACTORCOND:factorcond;

OPLOG ::= opOr
    | opAnd;

FACTORCOND ::= EXP:exp OPCOMP:opcomp EXP:exp2
    | abrirP EXP:exp cerrarP
    | opNot FACTORCOND:factorcond;

OPCOMP ::= opMenor
    | opMayor
    | opMenorIgual
    | opMayorIgual
    | opIgual;

INC ::= to
    | downto;
