
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\006\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\012\005\000\002\013\005\000\002\013\007\000\002" +
    "\014\003\000\002\014\005\000\002\015\010\000\002\016" +
    "\012\000\002\017\003\000\002\017\005\000\002\020\005" +
    "\000\002\020\007\000\002\021\003\000\002\021\003\000" +
    "\002\022\004\000\002\022\004\000\002\022\010\000\002" +
    "\022\006\000\002\022\007\000\002\022\012\000\002\023" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\005\000\002\030\004\000\002\031" +
    "\003\000\002\031\005\000\002\032\003\000\002\032\005" +
    "\000\002\033\004\000\002\034\005\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\060\004\064\006\001\002\000\004\004" +
    "\016\001\002\000\004\002\015\001\002\000\004\004\007" +
    "\001\002\000\004\015\010\001\002\000\004\050\uffc5\001" +
    "\002\000\006\050\ufffd\065\ufffd\001\002\000\004\050\013" +
    "\001\002\000\004\002\uffff\001\002\000\006\050\ufffc\065" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\015\017" +
    "\001\002\000\004\065\uffc5\001\002\000\004\065\023\001" +
    "\002\000\004\050\022\001\002\000\004\002\001\001\002" +
    "\000\020\004\037\026\035\027\036\030\032\033\025\034" +
    "\024\037\027\001\002\000\010\004\044\005\076\042\073" +
    "\001\002\000\004\004\127\001\002\000\004\066\126\001" +
    "\002\000\004\065\uffc5\001\002\000\004\066\ufffb\001\002" +
    "\000\004\015\121\001\002\000\010\004\044\005\076\042" +
    "\073\001\002\000\004\016\070\001\002\000\004\015\067" +
    "\001\002\000\004\066\ufffa\001\002\000\004\066\ufff9\001" +
    "\002\000\010\005\042\015\uffc5\016\uffe4\001\002\000\052" +
    "\006\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\031\uffd8\035\uffd8\040\uffd8\041\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\057\uffd8\071\uffd8\072" +
    "\uffd8\001\002\000\004\015\uffd4\001\002\000\006\004\044" +
    "\005\050\001\002\000\052\006\uffe2\011\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\031\uffe2\035\uffe2" +
    "\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\057\uffe2\071\uffe2\072\uffe2\001\002\000\054\005\042" +
    "\006\uffc5\011\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\031\uffc5\035\uffc5\040\uffc5\041\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\057\uffc5\071\uffc5\072" +
    "\uffc5\001\002\000\004\006\065\001\002\000\020\006\uffd6" +
    "\011\063\017\053\020\060\021\056\022\054\023\055\001" +
    "\002\000\052\006\uffdb\011\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\031\uffdb\035\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\057\uffdb" +
    "\071\uffdb\072\uffdb\001\002\000\006\004\044\005\050\001" +
    "\002\000\016\006\057\017\053\020\060\021\056\022\054" +
    "\023\055\001\002\000\006\004\044\005\050\001\002\000" +
    "\006\004\uffe0\005\uffe0\001\002\000\006\004\uffdd\005\uffdd" +
    "\001\002\000\006\004\uffdc\005\uffdc\001\002\000\006\004" +
    "\uffde\005\uffde\001\002\000\052\006\uffda\011\uffda\015\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\031\uffda\035" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\057\uffda\071\uffda\072\uffda\001\002\000\006\004" +
    "\uffdf\005\uffdf\001\002\000\006\004\uffe1\005\uffe1\001\002" +
    "\000\052\006\uffe3\011\uffe3\015\uffe3\017\053\020\060\021" +
    "\056\022\054\023\055\031\uffe3\035\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\057\uffe3\071" +
    "\uffe3\072\uffe3\001\002\000\006\004\044\005\050\001\002" +
    "\000\004\006\uffd5\001\002\000\052\006\uffd7\011\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\031\uffd7" +
    "\035\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\057\uffd7\071\uffd7\072\uffd7\001\002\000\052" +
    "\006\uffd9\011\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\031\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\057\uffd9\071\uffd9\072" +
    "\uffd9\001\002\000\004\066\uffea\001\002\000\006\004\044" +
    "\005\050\001\002\000\016\015\uffe5\017\053\020\060\021" +
    "\056\022\054\023\055\001\002\000\014\015\uffd2\031\uffd2" +
    "\035\uffd2\040\uffd2\041\uffd2\001\002\000\010\004\044\005" +
    "\076\042\073\001\002\000\010\031\112\040\113\041\110" +
    "\001\002\000\026\017\053\020\060\021\056\022\054\023" +
    "\055\043\102\044\106\045\101\046\103\047\104\001\002" +
    "\000\006\004\044\005\050\001\002\000\016\006\100\017" +
    "\053\020\060\021\056\022\054\023\055\001\002\000\040" +
    "\015\uffce\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\031" +
    "\uffce\035\uffce\040\uffce\041\uffce\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\001\002\000\006\004\uffcb\005\uffcb\001" +
    "\002\000\006\004\uffc8\005\uffc8\001\002\000\006\004\uffca" +
    "\005\uffca\001\002\000\006\004\uffc9\005\uffc9\001\002\000" +
    "\006\004\044\005\050\001\002\000\006\004\uffcc\005\uffcc" +
    "\001\002\000\026\015\uffcf\017\053\020\060\021\056\022" +
    "\054\023\055\031\uffcf\035\uffcf\040\uffcf\041\uffcf\001\002" +
    "\000\010\004\uffd0\005\uffd0\042\uffd0\001\002\000\010\004" +
    "\044\005\076\042\073\001\002\000\004\065\uffc5\001\002" +
    "\000\010\004\uffd1\005\uffd1\042\uffd1\001\002\000\004\032" +
    "\115\001\002\000\004\065\uffc5\001\002\000\004\066\uffe9" +
    "\001\002\000\014\015\uffd3\031\uffd3\035\uffd3\040\113\041" +
    "\110\001\002\000\014\015\uffcd\031\uffcd\035\uffcd\040\uffcd" +
    "\041\uffcd\001\002\000\004\066\uffeb\001\002\000\004\036" +
    "\123\001\002\000\010\004\044\005\076\042\073\001\002" +
    "\000\010\015\125\040\113\041\110\001\002\000\004\066" +
    "\uffe7\001\002\000\012\032\ufffe\036\ufffe\050\ufffe\066\ufffe" +
    "\001\002\000\004\016\130\001\002\000\006\004\044\005" +
    "\050\001\002\000\020\017\053\020\060\021\056\022\054" +
    "\023\055\057\133\072\132\001\002\000\006\004\uffc6\005" +
    "\uffc6\001\002\000\006\004\uffc7\005\uffc7\001\002\000\006" +
    "\004\044\005\050\001\002\000\016\017\053\020\060\021" +
    "\056\022\054\023\055\071\136\001\002\000\004\065\uffc5" +
    "\001\002\000\004\066\uffe6\001\002\000\010\035\141\040" +
    "\113\041\110\001\002\000\004\065\uffc5\001\002\000\004" +
    "\066\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\011\041\010\001\001\000\002\001\001\000\004\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\020\004\017\041" +
    "\010\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\025\022\027\023\030\024" +
    "\032\033\033\001\001\000\014\011\046\025\074\030\042" +
    "\034\137\036\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\121\004\017\041\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\046\025\074\030" +
    "\042\034\073\036\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\040\041\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\046\025\045\030\042\032\044\001\001\000" +
    "\002\001\001\000\006\031\065\041\037\001\001\000\002" +
    "\001\001\000\006\026\051\027\060\001\001\000\002\001" +
    "\001\000\010\011\046\025\050\030\042\001\001\000\006" +
    "\026\051\027\060\001\001\000\010\011\046\025\061\030" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\051\027\060\001\001" +
    "\000\012\011\046\025\045\030\042\032\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\046\025\070\030\042\001\001\000" +
    "\006\026\051\027\060\001\001\000\002\001\001\000\012" +
    "\011\046\025\074\030\042\036\117\001\001\000\004\035" +
    "\110\001\001\000\010\026\051\027\060\037\104\001\001" +
    "\000\010\011\046\025\076\030\042\001\001\000\006\026" +
    "\051\027\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\046\025\106\030\042\001\001\000\002\001\001" +
    "\000\006\026\051\027\060\001\001\000\002\001\001\000" +
    "\014\011\046\025\074\030\042\034\116\036\071\001\001" +
    "\000\010\003\113\004\017\041\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\115\004\017\041\010" +
    "\001\001\000\002\001\001\000\004\035\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\046\025\074\030\042\034\123\036\071\001\001\000" +
    "\004\035\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\046\025\130\030\042\001" +
    "\001\000\010\026\051\027\060\040\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\046\025\134\030" +
    "\042\001\001\000\006\026\051\027\060\001\001\000\010" +
    "\003\136\004\017\041\010\001\001\000\002\001\001\000" +
    "\004\035\110\001\001\000\010\003\141\004\017\041\010" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error (Symbol s){
	System.err.println("Error de sintaxis (lexema <" + s.value.toString() + ">) en la linea " + s.left + " y en la columna " + s.right);
	System.err.println("Error recuperado");
}

public void unrecovered_syntax_error(Symbol s){
	System.err.println("Error de sintaxis no recuperable");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= programa identificador puntoComa BLQ punto 
            {
              Object RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Programa p=new Programa();
		p.tipoPrograma=prog;
		p.nombre=identificador;
		p.bloque=blq;
		Programa.generarFichero(p.imprimir().toString());
		RESULT=p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit identificador puntoComa DCLLIST punto 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Programa p=new Programa();
		p.tipoPrograma=unit;
		p.bloque=dcllist;
		Programa.generarFichero(p.imprimir().toString());
		RESULT=p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sentlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT=sent;
    | SENTLIST:sentlist SENT:sent;

DCL ::= DEFCTE:defcte
    | DEFVAR:defvar
    | DEFPROC:defproc
    | DEFFUN:deffun;

DEFCTE ::= constante CTELIST:ctelist;

CTELIST ::= identificador opIgual SIMPVALUE:simpvalue puntoComa
    | CTELIST:ctelist identificador opIgual SIMPVALUE:simpvalue puntoComa;

SIMPVALUE ::= constEntera:cte {:
		Simbolo s=new Simbolo();
		s.esConstante=true;
		s.valorConstante=cte;
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= constReal 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Simbolo s=new Simbolo();
		s.esConstante=true;
		s.valorConstante=cte;
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= constLit 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Simbolo s=new Simbolo();
		s.esConstante=true;
		s.esValorConstante=cte;
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFVAR ::= variables DEFVARLIST puntoComa 
            {
              Object RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defvarlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object defvarlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARLIST ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARLIST ::= identificador coma VARLIST 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFPROC ::= procedimiento identificador FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object formalParamList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFFUN ::= funcion identificador FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object formalParamList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FORMAL_PARAMLIST ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FORMAL_PARAMLIST ::= abrirP FORMAL_PARAM cerrarP 
            {
              Object RESULT =null;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formalParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object formalParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TBAS ::= entero 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esTipado=true;
		s.tipo="INTEGER";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TBAS ::= real 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esTipado=true;
		s.tipo="REAL";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;
		int proCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= estIf EXPCOND estThen BLQ estElse BLQ 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blq2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blq2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= estWhile EXPCOND estDo BLQ 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= estRepetir BLQ estUntil EXPCOND puntoComa 
            {
              Object RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= estFor identificador opAsignacion EXP INC EXP doPR BLQ 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG ::= ID opAsignacion EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ID ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oparit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPARIT ::= opMas 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionAritmetica=true;
		s.tipoOperacionAritmetica="+";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPARIT ::= opMenos 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionAritmetica=true;
		s.tipoOperacionAritmetica="-";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPARIT ::= opMultiplicacion 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionAritmetica=true;
		s.tipoOperacionAritmetica="*";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPARIT ::= opDivision 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionAritmetica=true;
		s.tipoOperacionAritmetica="DIV";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPARIT ::= opModulo 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionAritmetica=true;
		s.tipoOperacionAritmetica="MOD";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simpvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= abrirP EXP cerrarP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= identificador SUBPPARAMLIST 
            {
              Object RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subparamlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUBPPARAMLIST ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SUBPPARAMLIST ::= abrirP EXPLIST cerrarP 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPLIST ::= EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROC_CALL ::= identificador SUBPPARAMLIST 
            {
              Object RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subparamlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oplog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expcond2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factorcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLOG ::= opOr 
            {
              Object RESULT =null;
		
		Simbolo s=new Símbolo();
		s.esOperacionLogica=true;
		s.tipoOperacionLogica="||";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLOG ::= opAnd 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionLogica=true;
		s.tipoOperacionLogica="&&";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opcomp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Simbolo s=new Simbolo();
		s=opcomp;
		Sentencia cf=new Sentencia();
		cf.condicion.addAll(exp1.simbolos);
		cf.condicion.add(opr);
		cf.condicion.addAll(exp2.simbolos);
		RESULT=cf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTORCOND ::= abrirP EXP cerrarP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT=exp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FACTORCOND ::= opNot FACTORCOND 
            {
              Object RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factorcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPCOMP ::= opMenor 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=true;
		s.tipoOperacion="<";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCOMP ::= opMayor 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=true;
		s.tipoOperacion=">";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCOMP ::= opMenorIgual 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=true;
		s.tipoOperacion="<=";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCOMP ::= opMayorIgual 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=true;
		s.tipoOperacion=">=";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCOMP ::= opIgual 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=true;
		s.tipoOperacion="==";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INC ::= to 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=false;
		s.tipoOperacion="++";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INC ::= downto 
            {
              Object RESULT =null;
		
		Simbolo s=new Simbolo();
		s.esOperacionComp=false;
		s.tipoOperacion="--";
		RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LAMBDA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LAMBDA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
