
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\004\006\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\004\000\002\011\006\000\002\011" +
    "\007\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\007\000" +
    "\002\015\003\000\002\015\005\000\002\016\010\000\002" +
    "\017\012\000\002\020\003\000\002\020\005\000\002\021" +
    "\005\000\002\021\007\000\002\022\003\000\002\022\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\010\000" +
    "\002\023\006\000\002\023\007\000\002\023\012\000\002" +
    "\024\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\005\000\002\031\004\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\005\000\002\034\004\000\002\035\005\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\004\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\060\005\064\007\001\002\000\004\002" +
    "\001\001\002\000\004\004\225\001\002\000\004\002\224" +
    "\001\002\000\004\004\010\001\002\000\004\015\011\001" +
    "\002\000\004\065\013\001\002\000\014\050\017\061\024" +
    "\063\020\070\016\071\015\001\002\000\016\050\ufffc\061" +
    "\ufffc\063\ufffc\066\ufffc\070\ufffc\071\ufffc\001\002\000\016" +
    "\050\ufffb\061\ufffb\063\ufffb\066\ufffb\070\ufffb\071\ufffb\001" +
    "\002\000\004\004\215\001\002\000\004\004\057\001\002" +
    "\000\004\002\ufffe\001\002\000\004\004\043\001\002\000" +
    "\016\050\ufff6\061\ufff6\063\ufff6\066\ufff6\070\ufff6\071\ufff6" +
    "\001\002\000\016\050\ufff5\061\ufff5\063\ufff5\066\ufff5\070" +
    "\ufff5\071\ufff5\001\002\000\016\050\ufff8\061\ufff8\063\ufff8" +
    "\066\ufff8\070\ufff8\071\ufff8\001\002\000\004\004\027\001" +
    "\002\000\016\050\ufff7\061\ufff7\063\ufff7\066\ufff7\070\ufff7" +
    "\071\ufff7\001\002\000\004\062\041\001\002\000\006\011" +
    "\037\062\uffeb\001\002\000\004\015\031\001\002\000\020" +
    "\004\027\050\uffee\061\uffee\063\uffee\066\uffee\070\uffee\071" +
    "\uffee\001\002\000\004\062\033\001\002\000\006\013\034" +
    "\014\036\001\002\000\006\006\uffe3\015\uffe3\001\002\000" +
    "\004\015\uffec\001\002\000\006\006\uffe2\015\uffe2\001\002" +
    "\000\004\004\027\001\002\000\004\062\uffea\001\002\000" +
    "\006\013\034\014\036\001\002\000\004\015\uffed\001\002" +
    "\000\004\043\054\001\002\000\020\004\045\050\ufff4\061" +
    "\ufff4\063\ufff4\066\ufff4\070\ufff4\071\ufff4\001\002\000\004" +
    "\043\046\001\002\000\010\024\050\026\052\027\047\001" +
    "\002\000\052\006\uffef\011\uffef\015\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\031\uffef\035\uffef\040\uffef\041" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\057\uffef" +
    "\072\uffef\073\uffef\001\002\000\052\006\ufff1\011\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\031\ufff1" +
    "\035\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\057\ufff1\072\ufff1\073\ufff1\001\002\000\004" +
    "\015\053\001\002\000\052\006\ufff0\011\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0\035\ufff0" +
    "\040\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\057\ufff0\072\ufff0\073\ufff0\001\002\000\020\004\ufff2" +
    "\050\ufff2\061\ufff2\063\ufff2\066\ufff2\070\ufff2\071\ufff2\001" +
    "\002\000\010\024\050\026\052\027\047\001\002\000\004" +
    "\015\056\001\002\000\020\004\ufff3\050\ufff3\061\ufff3\063" +
    "\ufff3\066\ufff3\070\ufff3\071\ufff3\001\002\000\006\005\062" +
    "\065\060\001\002\000\006\015\uffe7\062\uffe7\001\002\000" +
    "\004\015\072\001\002\000\004\004\027\001\002\000\004" +
    "\062\066\001\002\000\004\006\065\001\002\000\006\015" +
    "\uffe6\062\uffe6\001\002\000\006\013\034\014\036\001\002" +
    "\000\006\006\uffe5\015\070\001\002\000\004\004\027\001" +
    "\002\000\004\006\uffe4\001\002\000\004\065\013\001\002" +
    "\000\014\061\024\063\020\066\076\070\016\071\015\001" +
    "\002\000\004\015\075\001\002\000\016\050\uffe9\061\uffe9" +
    "\063\uffe9\066\uffe9\070\uffe9\071\uffe9\001\002\000\014\004" +
    "\110\030\105\033\100\034\077\037\103\001\002\000\016" +
    "\004\121\005\143\024\050\026\052\027\047\042\145\001" +
    "\002\000\004\004\201\001\002\000\016\004\110\030\105" +
    "\033\100\034\077\037\103\067\177\001\002\000\016\004" +
    "\ufffa\030\ufffa\033\ufffa\034\ufffa\037\ufffa\067\ufffa\001\002" +
    "\000\004\065\013\001\002\000\004\015\172\001\002\000" +
    "\016\004\121\005\143\024\050\026\052\027\047\042\145" +
    "\001\002\000\004\016\141\001\002\000\004\015\140\001" +
    "\002\000\010\005\113\016\uffda\065\111\001\002\000\052" +
    "\006\uffce\011\uffce\015\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\031\uffce\035\uffce\040\uffce\041\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\057\uffce\072\uffce\073" +
    "\uffce\001\002\000\004\015\uffca\001\002\000\014\004\121" +
    "\005\114\024\050\026\052\027\047\001\002\000\014\004" +
    "\121\005\114\024\050\026\052\027\047\001\002\000\052" +
    "\006\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\031\uffd8\035\uffd8\040\uffd8\041\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\057\uffd8\072\uffd8\073" +
    "\uffd8\001\002\000\052\006\uffd1\011\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\031\uffd1\035\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\057\uffd1\072\uffd1\073\uffd1\001\002\000\020\006\uffcc\011" +
    "\131\017\125\020\132\021\130\022\126\023\127\001\002" +
    "\000\004\006\123\001\002\000\006\005\113\065\111\001" +
    "\002\000\052\006\uffcf\011\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\031\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\057\uffcf" +
    "\072\uffcf\073\uffcf\001\002\000\052\006\uffcd\011\uffcd\015" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\031\uffcd" +
    "\035\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\057\uffcd\072\uffcd\073\uffcd\001\002\000\014" +
    "\004\121\005\114\024\050\026\052\027\047\001\002\000" +
    "\014\004\uffd6\005\uffd6\024\uffd6\026\uffd6\027\uffd6\001\002" +
    "\000\014\004\uffd3\005\uffd3\024\uffd3\026\uffd3\027\uffd3\001" +
    "\002\000\014\004\uffd2\005\uffd2\024\uffd2\026\uffd2\027\uffd2" +
    "\001\002\000\014\004\uffd4\005\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\001\002\000\014\004\121\005\114\024\050\026\052" +
    "\027\047\001\002\000\014\004\uffd5\005\uffd5\024\uffd5\026" +
    "\uffd5\027\uffd5\001\002\000\014\004\uffd7\005\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\001\002\000\004\006\uffcb\001\002\000" +
    "\052\006\uffd9\011\uffd9\015\uffd9\017\125\020\132\021\130" +
    "\022\126\023\127\031\uffd9\035\uffd9\040\uffd9\041\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\057\uffd9\072\uffd9" +
    "\073\uffd9\001\002\000\016\006\137\017\125\020\132\021" +
    "\130\022\126\023\127\001\002\000\052\006\uffd0\011\uffd0" +
    "\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\031" +
    "\uffd0\035\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\057\uffd0\072\uffd0\073\uffd0\001\002\000" +
    "\016\004\uffe0\030\uffe0\033\uffe0\034\uffe0\037\uffe0\067\uffe0" +
    "\001\002\000\014\004\121\005\114\024\050\026\052\027" +
    "\047\001\002\000\016\015\uffdb\017\125\020\132\021\130" +
    "\022\126\023\127\001\002\000\014\004\121\005\114\024" +
    "\050\026\052\027\047\001\002\000\014\015\uffc8\031\uffc8" +
    "\035\uffc8\040\uffc8\041\uffc8\001\002\000\016\004\121\005" +
    "\143\024\050\026\052\027\047\042\145\001\002\000\026" +
    "\017\125\020\132\021\130\022\126\023\127\043\161\044" +
    "\165\045\160\046\162\047\163\001\002\000\010\031\152" +
    "\040\153\041\150\001\002\000\016\004\uffc6\005\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\042\uffc6\001\002\000\016\004\121" +
    "\005\143\024\050\026\052\027\047\042\145\001\002\000" +
    "\004\065\013\001\002\000\016\004\uffc7\005\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\042\uffc7\001\002\000\004\032\155\001" +
    "\002\000\004\065\013\001\002\000\016\004\uffdf\030\uffdf" +
    "\033\uffdf\034\uffdf\037\uffdf\067\uffdf\001\002\000\014\015" +
    "\uffc9\031\uffc9\035\uffc9\040\153\041\150\001\002\000\014" +
    "\004\uffc1\005\uffc1\024\uffc1\026\uffc1\027\uffc1\001\002\000" +
    "\014\004\uffbe\005\uffbe\024\uffbe\026\uffbe\027\uffbe\001\002" +
    "\000\014\004\uffc0\005\uffc0\024\uffc0\026\uffc0\027\uffc0\001" +
    "\002\000\014\004\uffbf\005\uffbf\024\uffbf\026\uffbf\027\uffbf" +
    "\001\002\000\014\004\121\005\114\024\050\026\052\027" +
    "\047\001\002\000\014\004\uffc2\005\uffc2\024\uffc2\026\uffc2" +
    "\027\uffc2\001\002\000\026\015\uffc5\017\125\020\132\021" +
    "\130\022\126\023\127\031\uffc5\035\uffc5\040\uffc5\041\uffc5" +
    "\001\002\000\014\015\uffc3\031\uffc3\035\uffc3\040\uffc3\041" +
    "\uffc3\001\002\000\016\006\171\017\125\020\132\021\130" +
    "\022\126\023\127\001\002\000\040\015\uffc4\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\031\uffc4\035\uffc4\040\uffc4" +
    "\041\uffc4\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001" +
    "\002\000\016\004\uffe1\030\uffe1\033\uffe1\034\uffe1\037\uffe1" +
    "\067\uffe1\001\002\000\004\036\174\001\002\000\016\004" +
    "\121\005\143\024\050\026\052\027\047\042\145\001\002" +
    "\000\010\015\176\040\153\041\150\001\002\000\016\004" +
    "\uffdd\030\uffdd\033\uffdd\034\uffdd\037\uffdd\067\uffdd\001\002" +
    "\000\026\004\ufffd\015\ufffd\030\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\036\ufffd\037\ufffd\050\ufffd\067\ufffd\001\002\000\016" +
    "\004\ufff9\030\ufff9\033\ufff9\034\ufff9\037\ufff9\067\ufff9\001" +
    "\002\000\004\016\202\001\002\000\014\004\121\005\114" +
    "\024\050\026\052\027\047\001\002\000\020\017\125\020" +
    "\132\021\130\022\126\023\127\057\205\073\204\001\002" +
    "\000\014\004\uffbc\005\uffbc\024\uffbc\026\uffbc\027\uffbc\001" +
    "\002\000\014\004\uffbd\005\uffbd\024\uffbd\026\uffbd\027\uffbd" +
    "\001\002\000\014\004\121\005\114\024\050\026\052\027" +
    "\047\001\002\000\016\017\125\020\132\021\130\022\126" +
    "\023\127\072\210\001\002\000\004\065\013\001\002\000" +
    "\016\004\uffdc\030\uffdc\033\uffdc\034\uffdc\037\uffdc\067\uffdc" +
    "\001\002\000\010\035\213\040\153\041\150\001\002\000" +
    "\004\065\013\001\002\000\016\004\uffde\030\uffde\033\uffde" +
    "\034\uffde\037\uffde\067\uffde\001\002\000\006\005\062\065" +
    "\060\001\002\000\004\062\217\001\002\000\006\013\034" +
    "\014\036\001\002\000\004\015\221\001\002\000\004\065" +
    "\013\001\002\000\004\015\223\001\002\000\016\050\uffe8" +
    "\061\uffe8\063\uffe8\066\uffe8\070\uffe8\071\uffe8\001\002\000" +
    "\004\002\000\001\002\000\004\015\226\001\002\000\004" +
    "\065\013\001\002\000\004\050\230\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\014\007" +
    "\013\010\022\013\024\016\020\017\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\027\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\031\001" +
    "\001\000\002\001\001\000\004\022\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\037\001\001\000\002\001\001\000\004\022\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\062\021\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\066\001\001\000\002\001\001\000\006\015\062" +
    "\021\070\001\001\000\002\001\001\000\006\004\073\005" +
    "\072\001\001\000\014\007\013\010\022\013\024\016\020" +
    "\017\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\100\023\101\024\103\025\105\034\106\001\001" +
    "\000\014\012\115\026\145\031\114\035\211\037\143\001" +
    "\001\000\002\001\001\000\012\023\177\024\103\025\105" +
    "\034\106\001\001\000\002\001\001\000\006\004\172\005" +
    "\072\001\001\000\002\001\001\000\014\012\115\026\145" +
    "\031\114\035\146\037\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\115\026\116\031\114\033" +
    "\117\001\001\000\010\012\115\026\135\031\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\123\030" +
    "\132\001\001\000\002\001\001\000\004\032\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\115\026" +
    "\134\031\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\115\026" +
    "\116\031\114\033\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\123\030\132\001" +
    "\001\000\006\027\123\030\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\115\026\141\031\114\001" +
    "\001\000\006\027\123\030\132\001\001\000\010\012\115" +
    "\026\167\031\114\001\001\000\002\001\001\000\012\012" +
    "\115\026\145\031\114\037\166\001\001\000\010\027\123" +
    "\030\132\040\163\001\001\000\004\036\150\001\001\000" +
    "\002\001\001\000\014\012\115\026\145\031\114\035\156" +
    "\037\143\001\001\000\006\004\153\005\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\155\005\072" +
    "\001\001\000\002\001\001\000\004\036\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\115\026\165\031\114\001\001\000" +
    "\002\001\001\000\006\027\123\030\132\001\001\000\002" +
    "\001\001\000\006\027\123\030\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\115" +
    "\026\145\031\114\035\174\037\143\001\001\000\004\036" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\115\026\202\031" +
    "\114\001\001\000\010\027\123\030\132\041\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\115\026" +
    "\206\031\114\001\001\000\006\027\123\030\132\001\001" +
    "\000\006\004\210\005\072\001\001\000\002\001\001\000" +
    "\004\036\150\001\001\000\006\004\213\005\072\001\001" +
    "\000\002\001\001\000\004\020\215\001\001\000\002\001" +
    "\001\000\004\022\217\001\001\000\002\001\001\000\006" +
    "\004\221\005\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\226" +
    "\005\072\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
		report_error("Error encontrado en linea: "+s.left+ "columna: "+s.right,null);
	}
	public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
		report_fatal_error("Error encontrado en linea: "+s.left+"columna: "+s.right,null);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= PRG 
            {
              Simbolo RESULT =null;
		int prgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo prg = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo start_val = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= programa identificador puntoComa BLQ punto 
            {
              Simbolo RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= unit identificador puntoComa DCLLIST punto 
            {
              Simbolo RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo dcllist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Simbolo RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo dcllist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo sentlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= lambda 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              Simbolo RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo dcllist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo dcl = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENT 
            {
              Simbolo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo sent = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              Simbolo RESULT =null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo sentlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo sent = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFCTE 
            {
              Simbolo RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo defcte = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFVAR 
            {
              Simbolo RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo defvar = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFPROC 
            {
              Simbolo RESULT =null;
		int defprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo defproc = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFFUN 
            {
              Simbolo RESULT =null;
		int deffunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deffunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo deffun = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCTE ::= constante CTELIST 
            {
              Simbolo RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo ctelist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= identificador opIgual SIMPVALUE puntoComa 
            {
              Simbolo RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo simpvalue = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= CTELIST identificador opIgual SIMPVALUE puntoComa 
            {
              Simbolo RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo ctelist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo simpvalue = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= constEntera 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= constReal 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= constLit 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVAR ::= variables DEFVARLIST puntoComa 
            {
              Simbolo RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo defvarlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Simbolo RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo varlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo tbas = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Simbolo RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo defvarlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo varlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo tbas = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= identificador 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARLIST ::= identificador coma VARLIST 
            {
              Simbolo RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo varlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFPROC ::= procedimiento identificador FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Simbolo RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo formalParamList = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFFUN ::= funcion identificador FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Simbolo RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Simbolo formalParamList = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo tbas = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= lambda 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAMLIST ::= abrirP FORMAL_PARAM cerrarP 
            {
              Simbolo RESULT =null;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo formalParam = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Simbolo RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo varlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo tbas = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Simbolo RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo varlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo tbas = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo formalParam = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= entero 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TBAS ::= real 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= ASIG puntoComa 
            {
              Simbolo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo asig = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= PROC_CALL puntoComa 
            {
              Simbolo RESULT =null;
		int proCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo proCall = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= estIf EXPCOND estThen BLQ estElse BLQ 
            {
              Simbolo RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo expcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blq2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blq2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo blq2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= estWhile EXPCOND estDo BLQ 
            {
              Simbolo RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo expcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= estRepetir BLQ estUntil EXPCOND puntoComa 
            {
              Simbolo RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo expcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= estFor identificador opAsignacion EXP INC EXP doPR BLQ 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo inc = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo exp2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo blq = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIG ::= ID opAsignacion EXP 
            {
              Simbolo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo id = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= identificador 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP OP EXP 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo op = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo exp2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= FACTOR 
            {
              Simbolo RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo factor = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= OPARIT 
            {
              Simbolo RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo oparit = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPARIT ::= opMas 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= opMenos 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= opMultiplicacion 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= opDivision 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= opModulo 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= SIMPVALUE 
            {
              Simbolo RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo simpvalue = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= abrirP EXP cerrarP 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= identificador SUBPPARAMLIST 
            {
              Simbolo RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo subparamlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SUBPPARAMLIST ::= lambda 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUBPPARAMLIST ::= abrirP EXPLIST cerrarP 
            {
              Simbolo RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo explist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPLIST ::= EXP 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPLIST ::= EXP coma EXPLIST 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo explist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PROC_CALL ::= identificador SUBPPARAMLIST 
            {
              Simbolo RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo subparamlist = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Simbolo RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo expcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo oplog = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo expcond2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPCOND ::= FACTORCOND 
            {
              Simbolo RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo factorcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLOG ::= opOr 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= opAnd 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo opcomp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo exp2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= abrirP EXP cerrarP 
            {
              Simbolo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo exp = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= opNot FACTORCOND 
            {
              Simbolo RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo factorcond = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCOMP ::= opMenor 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= opMayor 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= opMenorIgual 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= opMayorIgual 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= opIgual 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INC ::= to 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INC ::= downto 
            {
              Simbolo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
