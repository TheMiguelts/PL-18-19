
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\003\006\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\010\006\000\002\010\007\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\005\000\002\013\007\000\002\014\003\000" +
    "\002\014\005\000\002\015\010\000\002\016\012\000\002" +
    "\017\004\000\002\017\005\000\002\020\005\000\002\020" +
    "\007\000\002\021\003\000\002\021\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\010\000\002\022\006\000" +
    "\002\022\007\000\002\022\012\000\002\023\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\004\000\002\031\005\000\002" +
    "\032\003\000\002\032\005\000\002\033\004\000\002\034" +
    "\005\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\003\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\060\004\064\006\001\002\000\004\004" +
    "\223\001\002\000\004\002\222\001\002\000\004\004\007" +
    "\001\002\000\004\015\010\001\002\000\012\061\021\063" +
    "\015\067\014\070\012\001\002\000\016\050\ufffd\061\ufffd" +
    "\063\ufffd\065\ufffd\067\ufffd\070\ufffd\001\002\000\004\004" +
    "\213\001\002\000\014\050\212\061\021\063\015\067\014" +
    "\070\012\001\002\000\004\004\054\001\002\000\004\004" +
    "\041\001\002\000\016\050\ufff7\061\ufff7\063\ufff7\065\ufff7" +
    "\067\ufff7\070\ufff7\001\002\000\016\050\ufff6\061\ufff6\063" +
    "\ufff6\065\ufff6\067\ufff6\070\ufff6\001\002\000\016\050\ufff9" +
    "\061\ufff9\063\ufff9\065\ufff9\067\ufff9\070\ufff9\001\002\000" +
    "\004\004\025\001\002\000\016\050\ufff8\061\ufff8\063\ufff8" +
    "\065\ufff8\067\ufff8\070\ufff8\001\002\000\004\062\036\001" +
    "\002\000\004\015\030\001\002\000\006\011\026\062\uffec" +
    "\001\002\000\004\004\025\001\002\000\004\062\uffeb\001" +
    "\002\000\020\004\025\050\uffef\061\uffef\063\uffef\065\uffef" +
    "\067\uffef\070\uffef\001\002\000\004\062\032\001\002\000" +
    "\006\013\033\014\035\001\002\000\006\006\uffe4\015\uffe4" +
    "\001\002\000\004\015\uffed\001\002\000\006\006\uffe3\015" +
    "\uffe3\001\002\000\006\013\033\014\035\001\002\000\004" +
    "\015\uffee\001\002\000\020\004\050\050\ufff5\061\ufff5\063" +
    "\ufff5\065\ufff5\067\ufff5\070\ufff5\001\002\000\004\043\042" +
    "\001\002\000\010\024\044\026\046\027\043\001\002\000" +
    "\052\006\ufff0\011\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\031\ufff0\035\ufff0\040\ufff0\041\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\057\ufff0\071\ufff0" +
    "\072\ufff0\001\002\000\052\006\ufff2\011\ufff2\015\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\035\ufff2" +
    "\040\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\057\ufff2\071\ufff2\072\ufff2\001\002\000\004\015\047" +
    "\001\002\000\052\006\ufff1\011\ufff1\015\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\031\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\057" +
    "\ufff1\071\ufff1\072\ufff1\001\002\000\020\004\ufff4\050\ufff4" +
    "\061\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4\001\002\000" +
    "\004\043\051\001\002\000\010\024\044\026\046\027\043" +
    "\001\002\000\004\015\053\001\002\000\020\004\ufff3\050" +
    "\ufff3\061\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\001\002" +
    "\000\004\005\056\001\002\000\004\015\067\001\002\000" +
    "\006\004\025\006\061\001\002\000\004\006\066\001\002" +
    "\000\004\062\062\001\002\000\006\015\uffe8\062\uffe8\001" +
    "\002\000\006\013\033\014\035\001\002\000\006\006\uffe6" +
    "\015\064\001\002\000\004\004\025\001\002\000\004\006" +
    "\uffe5\001\002\000\006\015\uffe7\062\uffe7\001\002\000\012" +
    "\061\021\063\015\067\014\070\012\001\002\000\004\015" +
    "\211\001\002\000\014\061\021\063\015\065\073\067\014" +
    "\070\012\001\002\000\016\050\ufffc\061\ufffc\063\ufffc\065" +
    "\ufffc\067\ufffc\070\ufffc\001\002\000\014\004\105\030\102" +
    "\033\075\034\074\037\100\001\002\000\016\004\115\005" +
    "\140\024\044\026\046\027\043\042\141\001\002\000\004" +
    "\004\175\001\002\000\016\004\105\030\102\033\075\034" +
    "\074\037\100\066\173\001\002\000\016\004\ufffb\030\ufffb" +
    "\033\ufffb\034\ufffb\037\ufffb\066\ufffb\001\002\000\012\061" +
    "\021\063\015\067\014\070\012\001\002\000\004\015\166" +
    "\001\002\000\016\004\115\005\140\024\044\026\046\027" +
    "\043\042\141\001\002\000\004\016\135\001\002\000\004" +
    "\015\134\001\002\000\006\005\107\016\uffdb\001\002\000" +
    "\004\015\uffcc\001\002\000\014\004\115\005\110\024\044" +
    "\026\046\027\043\001\002\000\014\004\115\005\110\024" +
    "\044\026\046\027\043\001\002\000\052\006\uffd9\011\uffd9" +
    "\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\031" +
    "\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\057\uffd9\071\uffd9\072\uffd9\001\002\000" +
    "\052\006\uffd2\011\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\031\uffd2\035\uffd2\040\uffd2\041\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\057\uffd2\071\uffd2" +
    "\072\uffd2\001\002\000\020\006\uffce\011\125\017\121\020" +
    "\127\021\124\022\122\023\123\001\002\000\004\006\117" +
    "\001\002\000\004\005\107\001\002\000\052\006\uffd0\011" +
    "\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\031\uffd0\035\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\057\uffd0\071\uffd0\072\uffd0\001\002" +
    "\000\052\006\uffcf\011\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\031\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\057\uffcf\071" +
    "\uffcf\072\uffcf\001\002\000\014\004\115\005\110\024\044" +
    "\026\046\027\043\001\002\000\014\004\uffd7\005\uffd7\024" +
    "\uffd7\026\uffd7\027\uffd7\001\002\000\014\004\uffd4\005\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\001\002\000\014\004\uffd3\005" +
    "\uffd3\024\uffd3\026\uffd3\027\uffd3\001\002\000\014\004\uffd5" +
    "\005\uffd5\024\uffd5\026\uffd5\027\uffd5\001\002\000\014\004" +
    "\115\005\110\024\044\026\046\027\043\001\002\000\014" +
    "\004\uffd8\005\uffd8\024\uffd8\026\uffd8\027\uffd8\001\002\000" +
    "\014\004\uffd6\005\uffd6\024\uffd6\026\uffd6\027\uffd6\001\002" +
    "\000\004\006\uffcd\001\002\000\052\006\uffda\011\uffda\015" +
    "\uffda\017\121\020\127\021\124\022\122\023\123\031\uffda" +
    "\035\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\057\uffda\071\uffda\072\uffda\001\002\000\016" +
    "\006\133\017\121\020\127\021\124\022\122\023\123\001" +
    "\002\000\052\006\uffd1\011\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\031\uffd1\035\uffd1\040\uffd1\041" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\057\uffd1" +
    "\071\uffd1\072\uffd1\001\002\000\016\004\uffe1\030\uffe1\033" +
    "\uffe1\034\uffe1\037\uffe1\066\uffe1\001\002\000\014\004\115" +
    "\005\110\024\044\026\046\027\043\001\002\000\016\015" +
    "\uffdc\017\121\020\127\021\124\022\122\023\123\001\002" +
    "\000\014\015\uffca\031\uffca\035\uffca\040\uffca\041\uffca\001" +
    "\002\000\014\004\115\005\110\024\044\026\046\027\043" +
    "\001\002\000\016\004\115\005\140\024\044\026\046\027" +
    "\043\042\141\001\002\000\026\017\121\020\127\021\124" +
    "\022\122\023\123\043\155\044\161\045\154\046\156\047" +
    "\157\001\002\000\010\031\146\040\147\041\144\001\002" +
    "\000\016\004\uffc8\005\uffc8\024\uffc8\026\uffc8\027\uffc8\042" +
    "\uffc8\001\002\000\016\004\115\005\140\024\044\026\046" +
    "\027\043\042\141\001\002\000\012\061\021\063\015\067" +
    "\014\070\012\001\002\000\016\004\uffc9\005\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\042\uffc9\001\002\000\004\032\151\001" +
    "\002\000\012\061\021\063\015\067\014\070\012\001\002" +
    "\000\016\004\uffe0\030\uffe0\033\uffe0\034\uffe0\037\uffe0\066" +
    "\uffe0\001\002\000\014\015\uffcb\031\uffcb\035\uffcb\040\147" +
    "\041\144\001\002\000\014\004\uffc3\005\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\001\002\000\014\004\uffc0\005\uffc0\024\uffc0" +
    "\026\uffc0\027\uffc0\001\002\000\014\004\uffc2\005\uffc2\024" +
    "\uffc2\026\uffc2\027\uffc2\001\002\000\014\004\uffc1\005\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\001\002\000\014\004\115\005" +
    "\110\024\044\026\046\027\043\001\002\000\014\004\uffc4" +
    "\005\uffc4\024\uffc4\026\uffc4\027\uffc4\001\002\000\026\015" +
    "\uffc7\017\121\020\127\021\124\022\122\023\123\031\uffc7" +
    "\035\uffc7\040\uffc7\041\uffc7\001\002\000\014\015\uffc5\031" +
    "\uffc5\035\uffc5\040\uffc5\041\uffc5\001\002\000\016\006\165" +
    "\017\121\020\127\021\124\022\122\023\123\001\002\000" +
    "\040\015\uffc6\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\031\uffc6\035\uffc6\040\uffc6\041\uffc6\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\001\002\000\016\004\uffe2\030\uffe2" +
    "\033\uffe2\034\uffe2\037\uffe2\066\uffe2\001\002\000\004\036" +
    "\170\001\002\000\016\004\115\005\140\024\044\026\046" +
    "\027\043\042\141\001\002\000\010\015\172\040\147\041" +
    "\144\001\002\000\016\004\uffde\030\uffde\033\uffde\034\uffde" +
    "\037\uffde\066\uffde\001\002\000\026\004\ufffe\015\ufffe\030" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\036\ufffe\037\ufffe\050\ufffe" +
    "\066\ufffe\001\002\000\016\004\ufffa\030\ufffa\033\ufffa\034" +
    "\ufffa\037\ufffa\066\ufffa\001\002\000\004\016\176\001\002" +
    "\000\014\004\115\005\110\024\044\026\046\027\043\001" +
    "\002\000\020\017\121\020\127\021\124\022\122\023\123" +
    "\057\201\072\200\001\002\000\014\004\uffbe\005\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\001\002\000\014\004\uffbf\005\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\001\002\000\014\004\115\005" +
    "\110\024\044\026\046\027\043\001\002\000\016\017\121" +
    "\020\127\021\124\022\122\023\123\071\204\001\002\000" +
    "\012\061\021\063\015\067\014\070\012\001\002\000\016" +
    "\004\uffdd\030\uffdd\033\uffdd\034\uffdd\037\uffdd\066\uffdd\001" +
    "\002\000\010\035\207\040\147\041\144\001\002\000\012" +
    "\061\021\063\015\067\014\070\012\001\002\000\016\004" +
    "\uffdf\030\uffdf\033\uffdf\034\uffdf\037\uffdf\066\uffdf\001\002" +
    "\000\016\050\uffea\061\uffea\063\uffea\065\uffea\067\uffea\070" +
    "\uffea\001\002\000\004\002\uffff\001\002\000\004\005\056" +
    "\001\002\000\004\062\215\001\002\000\006\013\033\014" +
    "\035\001\002\000\004\015\217\001\002\000\012\061\021" +
    "\063\015\067\014\070\012\001\002\000\004\015\221\001" +
    "\002\000\016\050\uffe9\061\uffe9\063\uffe9\065\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\004\002\000\001\002\000\004\015" +
    "\224\001\002\000\012\061\021\063\015\067\014\070\012" +
    "\001\002\000\004\050\226\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\012\006\010\007\017\012\021\015\015\016\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\071" +
    "\007\017\012\021\015\015\016\016\001\001\000\002\001" +
    "\001\000\004\010\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\023\014\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\026\001\001\000\002\001" +
    "\001\000\004\014\030\001\001\000\002\001\001\000\004" +
    "\021\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\054\001\001\000\002\001\001\000\006\014" +
    "\057\020\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\062\001\001\000\002\001" +
    "\001\000\006\014\057\020\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\067\004\070\006\010\007" +
    "\017\012\021\015\015\016\016\001\001\000\002\001\001" +
    "\000\014\006\071\007\017\012\021\015\015\016\016\001" +
    "\001\000\002\001\001\000\014\005\075\022\076\023\100" +
    "\024\102\033\103\001\001\000\014\011\111\025\141\030" +
    "\110\034\205\036\136\001\001\000\002\001\001\000\012" +
    "\022\173\023\100\024\102\033\103\001\001\000\002\001" +
    "\001\000\020\003\166\004\070\006\010\007\017\012\021" +
    "\015\015\016\016\001\001\000\002\001\001\000\014\011" +
    "\111\025\141\030\110\034\142\036\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\105\001\001\000" +
    "\002\001\001\000\012\011\111\025\112\030\110\032\113" +
    "\001\001\000\010\011\111\025\131\030\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\117\027\125" +
    "\001\001\000\002\001\001\000\004\031\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\111\025\130" +
    "\030\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\111\025\112" +
    "\030\110\032\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\117\027\125\001\001" +
    "\000\006\026\117\027\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\111\025\135\030\110\001\001" +
    "\000\006\026\117\027\125\001\001\000\002\001\001\000" +
    "\010\011\111\025\163\030\110\001\001\000\012\011\111" +
    "\025\141\030\110\036\162\001\001\000\010\026\117\027" +
    "\125\037\157\001\001\000\004\035\144\001\001\000\002" +
    "\001\001\000\014\011\111\025\141\030\110\034\152\036" +
    "\136\001\001\000\020\003\147\004\070\006\010\007\017" +
    "\012\021\015\015\016\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\151\004\070\006\010\007\017" +
    "\012\021\015\015\016\016\001\001\000\002\001\001\000" +
    "\004\035\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\111\025" +
    "\161\030\110\001\001\000\002\001\001\000\006\026\117" +
    "\027\125\001\001\000\002\001\001\000\006\026\117\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\111\025\141\030\110\034\170\036" +
    "\136\001\001\000\004\035\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\111\025\176\030\110\001\001\000\010\026\117" +
    "\027\125\040\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\111\025\202\030\110\001\001\000\006" +
    "\026\117\027\125\001\001\000\020\003\204\004\070\006" +
    "\010\007\017\012\021\015\015\016\016\001\001\000\002" +
    "\001\001\000\004\035\144\001\001\000\020\003\207\004" +
    "\070\006\010\007\017\012\021\015\015\016\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\213\001\001\000\002\001\001\000\004\021\215" +
    "\001\001\000\002\001\001\000\020\003\217\004\070\006" +
    "\010\007\017\012\021\015\015\016\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\224\004\070\006\010\007\017\012\021" +
    "\015\015\016\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
		report_error(" // Error encontrado en linea: "+s.left+ " columna: "+s.right+" // ",null);
	}
	public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
		report_fatal_error(" // Error encontrado en linea: "+s.left+" columna: "+s.right+" // ",null);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= programa identificador puntoComa BLQ punto 
            {
              Simbolo RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Simbolo s=new Simbolo();
			s.imprimir="AAAA";
			s.imprimirCosa(s.imprimir);
			RESULT=s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo start_val = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit identificador puntoComa DCLLIST punto 
            {
              Simbolo RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sentlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= DCL 
            {
              Object RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sentlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Object RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defcte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Object RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defvar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Object RESULT =null;
		int defprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defproc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Object RESULT =null;
		int deffunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deffunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object deffun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCTE ::= constante CTELIST 
            {
              Object RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctelist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTELIST ::= identificador opIgual SIMPVALUE puntoComa 
            {
              Object RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object simpvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= CTELIST identificador opIgual SIMPVALUE puntoComa 
            {
              Object RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ctelist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object simpvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIMPVALUE ::= constEntera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= constReal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= constLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVAR ::= variables DEFVARLIST puntoComa 
            {
              Object RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defvarlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object defvarlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARLIST ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= identificador coma VARLIST 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFPROC ::= procedimiento identificador FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object formalParamList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFFUN ::= funcion identificador FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int formalParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formalParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object formalParamList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAMLIST ::= abrirP cerrarP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= abrirP FORMAL_PARAM cerrarP 
            {
              Object RESULT =null;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formalParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tbas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formalParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formalParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object formalParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TBAS ::= entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;
		int proCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= estIf EXPCOND estThen BLQ estElse BLQ 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blq2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blq2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= estWhile EXPCOND estDo BLQ 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= estRepetir BLQ estUntil EXPCOND puntoComa 
            {
              Object RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= estFor identificador opAsignacion EXP INC EXP doPR BLQ 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIG ::= ID opAsignacion EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oparit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPARIT ::= opMas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPARIT ::= opMenos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= opMultiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= opDivision 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= opModulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object simpvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= abrirP EXP cerrarP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= identificador SUBPPARAMLIST 
            {
              Object RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subparamlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SUBPPARAMLIST ::= abrirP EXPLIST cerrarP 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPLIST ::= EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object explist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PROC_CALL ::= identificador SUBPPARAMLIST 
            {
              Object RESULT =null;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subparamlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;
		int expcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oplog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expcond2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factorcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPLOG ::= opOr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPLOG ::= opAnd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opcomp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTORCOND ::= abrirP EXP cerrarP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTORCOND ::= opNot FACTORCOND 
            {
              Object RESULT =null;
		int factorcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factorcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPCOMP ::= opMenor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPCOMP ::= opMayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCOMP ::= opMenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= opMayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= opIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INC ::= to 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INC ::= downto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
